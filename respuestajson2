{
    "backend": {
        "modules": [
            {
                "name": "AppModule",
                "files": [
                    {
                        "path": "src/app.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsuarioModule } from './usuario/usuario.module';\nimport { AuthModule } from './auth/auth.module';\nimport { HorarioModule } from './horario/horario.module';\nimport { AsistenciaModule } from './asistencia/asistencia.module';\nimport { ActividadModule } from './actividad/actividad.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'sqlite',\n      database: 'db.sqlite',\n      entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      synchronize: true, // Only for development.  Don't use in production.\n    }),\n    UsuarioModule,\n    AuthModule,\n    HorarioModule,\n    AsistenciaModule,\n    ActividadModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app.controller.ts",
                        "content": "import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app.service.ts",
                        "content": "import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "AuthModule",
                "files": [
                    {
                        "path": "src/auth/auth.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsuarioModule } from '../usuario/usuario.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    UsuarioModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRATION'),\n        },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/auth.service.ts",
                        "content": "import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsuarioService } from '../usuario/usuario.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usuarioService: UsuarioService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async login(loginDto: LoginDto) {\n    const { email, password } = loginDto;\n\n    const usuario = await this.usuarioService.findOneByEmail(email);\n\n    if (!usuario) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, usuario.password);\n\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const payload = { sub: usuario.id, email: usuario.email, roles: usuario.roles };\n\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n\n  async register(registerDto: RegisterDto) {\n    return this.usuarioService.create(registerDto);\n  }\n\n  async validateUser(payload: any): Promise<any> {\n    const user = await this.usuarioService.findOne(payload.sub);\n    if (!user) {\n      return null;\n    }\n    return user;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/auth.controller.ts",
                        "content": "import { Controller, Post, Body, HttpCode, HttpStatus, UseGuards, Get, Request } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto);\n  }\n\n  @Post('register')\n  register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/dto/login.dto.ts",
                        "content": "import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/dto/register.dto.ts",
                        "content": "import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  @IsNotEmpty()\n  nombre: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/strategies/jwt.strategy.ts",
                        "content": "import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService, private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.authService.validateUser(payload);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "UsersModule",
                "files": [
                    {
                        "path": "src/users/users.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Alumno } from './entities/alumno.entity';\nimport { JefeDeGrupo } from './entities/jefe-de-grupo.entity';\nimport { Profesor } from './entities/profesor.entity';\nimport { Horario } from './entities/horario.entity';\nimport { Asistencia } from './entities/asistencia.entity';\nimport { Actividad } from './entities/actividad.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Alumno, JefeDeGrupo, Profesor, Horario, Asistencia, Actividad])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n",
                        "type": "module"
                    },
                    {
                        "path": "src/users/users.controller.ts",
                        "content": "import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n\n  @Get(':userId/horario')\n  async getHorario(@Param('userId') userId: string): Promise<any> {\n    return this.usersService.getHorario(+userId);\n  }\n\n  @Post(':jefeDeGrupoId/asistencia/profesor/:profesorId')\n  async tomarAsistenciaProfesor(\n    @Param('jefeDeGrupoId') jefeDeGrupoId: string,\n    @Param('profesorId') profesorId: string\n  ): Promise<any> {\n    return this.usersService.tomarAsistenciaProfesor(+jefeDeGrupoId, +profesorId);\n  }\n\n  @Post(':jefeDeGrupoId/actividad')\n  async anadirActividad(\n    @Param('jefeDeGrupoId') jefeDeGrupoId: string,\n    @Body() actividadData: any // Replace 'any' with a DTO for Actividad\n  ): Promise<any> {\n    return this.usersService.anadirActividad(+jefeDeGrupoId, actividadData);\n  }\n\n  @Get(':jefeDeGrupoId/horario/profesor/:profesorId')\n  async verHorarioProfesor(\n    @Param('jefeDeGrupoId') jefeDeGrupoId: string,\n    @Param('profesorId') profesorId: string\n  ): Promise<any> {\n    return this.usersService.verHorarioProfesor(+jefeDeGrupoId, +profesorId);\n  }\n\n  @Post(':profesorId/asistencia')\n  async ponerAsistencia(@Param('profesorId') profesorId: string): Promise<any> {\n    return this.usersService.ponerAsistencia(+profesorId);\n  }\n}\n",
                        "type": "controller"
                    },
                    {
                        "path": "src/users/users.service.ts",
                        "content": "import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { Alumno } from './entities/alumno.entity';\nimport { JefeDeGrupo } from './entities/jefe-de-grupo.entity';\nimport { Profesor } from './entities/profesor.entity';\nimport { Horario } from './entities/horario.entity';\nimport { Asistencia } from './entities/asistencia.entity';\nimport { Actividad } from './entities/actividad.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository<User>,\n    @InjectRepository(Alumno) private alumnoRepository: Repository<Alumno>,\n    @InjectRepository(JefeDeGrupo) private jefeDeGrupoRepository: Repository<JefeDeGrupo>,\n    @InjectRepository(Profesor) private profesorRepository: Repository<Profesor>,\n    @InjectRepository(Horario) private horarioRepository: Repository<Horario>,\n    @InjectRepository(Asistencia) private asistenciaRepository: Repository<Asistencia>,\n    @InjectRepository(Actividad) private actividadRepository: Repository<Actividad>,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise<User> {\n    const user = this.userRepository.create(createUserDto);\n    return this.userRepository.save(user);\n  }\n\n  async findAll(): Promise<User[]> {\n    return this.userRepository.find();\n  }\n\n  async findOne(id: number): Promise<User> {\n    const user = await this.userRepository.findOneBy({ id: id });\n    if (!user) {\n      throw new NotFoundException(`User with ID \"${id}\" not found`);\n    }\n    return user;\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto): Promise<User> {\n    const user = await this.findOne(id);\n    Object.assign(user, updateUserDto);\n    return this.userRepository.save(user);\n  }\n\n  async remove(id: number): Promise<void> {\n    const user = await this.findOne(id);\n    await this.userRepository.remove(user);\n  }\n\n  async getHorario(userId: number): Promise<Horario[]> {\n    const alumno = await this.alumnoRepository.findOneBy({ userId: userId });\n    if (!alumno) {\n      throw new NotFoundException(`Alumno with userId \"${userId}\" not found`);\n    }\n\n    return this.horarioRepository.findBy({ grupo: alumno.grupo });\n  }\n\n  async tomarAsistenciaProfesor(jefeDeGrupoId: number, profesorId: number): Promise<Asistencia> {\n    const jefeDeGrupo = await this.jefeDeGrupoRepository.findOneBy({ userId: jefeDeGrupoId });\n    const profesor = await this.profesorRepository.findOneBy({ userId: profesorId });\n\n    if (!jefeDeGrupo) {\n      throw new NotFoundException(`JefeDeGrupo with userId \"${jefeDeGrupoId}\" not found`);\n    }\n    if (!profesor) {\n      throw new NotFoundException(`Profesor with userId \"${profesorId}\" not found`);\n    }\n\n    const asistencia = this.asistenciaRepository.create({\n      fecha: new Date(),\n      presente: true,\n      profesor: profesor,\n    });\n\n    return await this.asistenciaRepository.save(asistencia);\n  }\n\n  async anadirActividad(jefeDeGrupoId: number, actividadData: any): Promise<Actividad> {\n    const jefeDeGrupo = await this.jefeDeGrupoRepository.findOneBy({ userId: jefeDeGrupoId });\n\n    if (!jefeDeGrupo) {\n      throw new NotFoundException(`JefeDeGrupo with userId \"${jefeDeGrupoId}\" not found`);\n    }\n\n    // Assuming actividadData contains nombre, descripcion, fechaEntrega\n    const actividad = this.actividadRepository.create({\n      nombre: actividadData.nombre,\n      descripcion: actividadData.descripcion,\n      fechaEntrega: new Date(actividadData.fechaEntrega),\n    });\n\n    return await this.actividadRepository.save(actividad);\n  }\n\n  async verHorarioProfesor(jefeDeGrupoId: number, profesorId: number): Promise<Horario[]> {\n    const jefeDeGrupo = await this.jefeDeGrupoRepository.findOneBy({ userId: jefeDeGrupoId });\n    const profesor = await this.profesorRepository.findOneBy({ userId: profesorId });\n\n    if (!jefeDeGrupo) {\n      throw new NotFoundException(`JefeDeGrupo with userId \"${jefeDeGrupoId}\" not found`);\n    }\n    if (!profesor) {\n      throw new NotFoundException(`Profesor with userId \"${profesorId}\" not found`);\n    }\n\n    return this.horarioRepository.findBy({ profesor: { id: profesor.id } });\n  }\n\n  async ponerAsistencia(profesorId: number): Promise<Asistencia> {\n    const profesor = await this.profesorRepository.findOneBy({ userId: profesorId });\n\n    if (!profesor) {\n      throw new NotFoundException(`Profesor with userId \"${profesorId}\" not found`);\n    }\n\n    const asistencia = this.asistenciaRepository.create({\n      fecha: new Date(),\n      presente: true,\n      profesor: profesor,\n    });\n\n    return await this.asistenciaRepository.save(asistencia);\n  }\n}\n",
                        "type": "service"
                    },
                    {
                        "path": "src/users/dto/create-user.dto.ts",
                        "content": "import { IsString, IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  nombre: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n",
                        "type": "dto"
                    },
                    {
                        "path": "src/users/dto/update-user.dto.ts",
                        "content": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n",
                        "type": "dto"
                    },
                    {
                        "path": "src/users/entities/user.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { Alumno } from './alumno.entity';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\nimport { Profesor } from './profesor.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  nombre: string;\n\n  @Column({\n    unique: true\n  })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @OneToMany(() => Alumno, (alumno) => alumno.user)\n  alumnos: Alumno[];\n\n  @OneToMany(() => JefeDeGrupo, (jefeDeGrupo) => jefeDeGrupo.user)\n  jefesDeGrupo: JefeDeGrupo[];\n\n  @OneToMany(() => Profesor, (profesor) => profesor.user)\n  profesores: Profesor[];\n}\n",
                        "type": "entity"
                    },
                    {
                        "path": "src/users/entities/alumno.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity('alumnos')\nexport class Alumno {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  grupo: string;\n\n  @Column()\n  userId: number;\n\n  @ManyToOne(() => User, (user) => user.alumnos)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n}\n",
                        "type": "entity"
                    },
                    {
                        "path": "src/users/entities/jefe-de-grupo.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity('jefes_de_grupo')\nexport class JefeDeGrupo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  grupo: string;\n\n  @Column()\n  userId: number;\n\n  @ManyToOne(() => User, (user) => user.jefesDeGrupo)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n}\n",
                        "type": "entity"
                    },
                    {
                        "path": "src/users/entities/profesor.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity('profesores')\nexport class Profesor {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  materia: string;\n\n  @Column()\n  userId: number;\n\n  @ManyToOne(() => User, (user) => user.profesores)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n}\n",
                        "type": "entity"
                    },
                    {
                        "path": "src/users/entities/horario.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { Profesor } from './profesor.entity';\n\n@Entity('horarios')\nexport class Horario {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  grupo: string;\n\n  @Column()\n  materia: string;\n\n  @Column()\n  hora: string;\n\n  @Column()\n  dia: string;\n\n  @ManyToOne(() => Profesor, professor => professor.id)\n  @JoinColumn({name: 'profesorId'})\n  profesor: Profesor; // Relation with Profesor\n}\n",
                        "type": "entity"
                    },
                    {
                        "path": "src/users/entities/asistencia.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { Profesor } from './profesor.entity';\n\n@Entity('asistencias')\nexport class Asistencia {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'date' })\n  fecha: Date;\n\n  @Column({\n    default: true,\n  })\n  presente: boolean;\n\n  @ManyToOne(() => Profesor, professor => professor.id)\n  @JoinColumn({name: 'profesorId'})\n  profesor: Profesor;\n}\n",
                        "type": "entity"
                    },
                    {
                        "path": "src/users/entities/actividad.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity('actividades')\nexport class Actividad {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  nombre: string;\n\n  @Column()\n  descripcion: string;\n\n  @Column({ type: 'date' })\n  fechaEntrega: Date;\n}\n",
                        "type": "entity"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "TasksModule",
                "files": [
                    {
                        "path": "src/tasks/tasks.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { Task } from './entities/task.entity';\nimport { Usuario } from './entities/usuario.entity';\nimport { Alumno } from './entities/alumno.entity';\nimport { JefeDeGrupo } from './entities/jefe-de-grupo.entity';\nimport { Profesor } from './entities/profesor.entity';\nimport { Horario } from './entities/horario.entity';\nimport { Asistencia } from './entities/asistencia.entity';\nimport { Actividad } from './entities/actividad.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, Usuario, Alumno, JefeDeGrupo, Profesor, Horario, Asistencia, Actividad])],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/tasks.controller.ts",
                        "content": "import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\n\n@Controller('tasks')\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  @Post()\n  create(@Body() createTaskDto: CreateTaskDto) {\n    return this.tasksService.create(createTaskDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.tasksService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.tasksService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return this.tasksService.update(+id, updateTaskDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.tasksService.remove(+id);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/tasks.service.ts",
                        "content": "import { Injectable } from '@nestjs/common';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Task } from './entities/task.entity';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(Task)\n    private taskRepository: Repository<Task>,\n  ) {}\n\n  create(createTaskDto: CreateTaskDto) {\n    return this.taskRepository.save(createTaskDto);\n  }\n\n  findAll() {\n    return this.taskRepository.find();\n  }\n\n  findOne(id: number) {\n    return this.taskRepository.findOneBy({ id });\n  }\n\n  update(id: number, updateTaskDto: UpdateTaskDto) {\n    return this.taskRepository.update(id, updateTaskDto);\n  }\n\n  remove(id: number) {\n    return this.taskRepository.delete(id);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/dto/create-task.dto.ts",
                        "content": "export class CreateTaskDto {\n  title: string;\n  description: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/dto/update-task.dto.ts",
                        "content": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\nexport class UpdateTaskDto extends PartialType(CreateTaskDto) {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/task.entity.ts",
                        "content": "import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/usuario.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { Alumno } from './alumno.entity';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\nimport { Profesor } from './profesor.entity';\n\n@Entity()\nexport class Usuario {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  nombre: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  password: string;\n\n  @OneToMany(() => Alumno, alumno => alumno.usuario)\n  alumnos: Alumno[];\n\n  @OneToMany(() => JefeDeGrupo, jefeDeGrupo => jefeDeGrupo.usuario)\n  jefesDeGrupo: JefeDeGrupo[];\n\n  @OneToMany(() => Profesor, profesor => profesor.usuario)\n  profesores: Profesor[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/alumno.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn, OneToMany } from 'typeorm';\nimport { Usuario } from './usuario.entity';\nimport { Horario } from './horario.entity';\n\n@Entity()\nexport class Alumno {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => Usuario, usuario => usuario.alumnos)\n  @JoinColumn({ name: 'usuarioId' })\n  usuario: Usuario;\n\n  @OneToMany(() => Horario, horario => horario.alumno)\n  horarios: Horario[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/jefe-de-grupo.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn, OneToMany } from 'typeorm';\nimport { Usuario } from './usuario.entity';\nimport { Asistencia } from './asistencia.entity';\nimport { Actividad } from './actividad.entity';\nimport { Horario } from './horario.entity';\n\n@Entity()\nexport class JefeDeGrupo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => Usuario, usuario => usuario.jefesDeGrupo)\n  @JoinColumn({ name: 'usuarioId' })\n  usuario: Usuario;\n\n  @OneToMany(() => Asistencia, asistencia => asistencia.jefeDeGrupo)\n  asistencias: Asistencia[];\n\n  @OneToMany(() => Actividad, actividad => actividad.jefeDeGrupo)\n  actividades: Actividad[];\n\n  @OneToMany(() => Horario, horario => horario.jefeDeGrupo)\n  horarios: Horario[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/profesor.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn, OneToMany } from 'typeorm';\nimport { Usuario } from './usuario.entity';\nimport { Asistencia } from './asistencia.entity';\n\n@Entity()\nexport class Profesor {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => Usuario, usuario => usuario.profesores)\n  @JoinColumn({ name: 'usuarioId' })\n  usuario: Usuario;\n\n  @OneToMany(() => Asistencia, asistencia => asistencia.profesor)\n  asistencias: Asistencia[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/horario.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { Alumno } from './alumno.entity';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\n\n@Entity()\nexport class Horario {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  grupo: string;\n\n  @Column()\n  materia: string;\n\n  @Column()\n  hora: string;\n\n  @Column()\n  dia: string;\n\n  @ManyToOne(() => Alumno, alumno => alumno.horarios)\n  @JoinColumn({ name: 'alumnoId' })\n  alumno: Alumno;\n\n  @ManyToOne(() => JefeDeGrupo, jefeDeGrupo => jefeDeGrupo.horarios)\n  @JoinColumn({ name: 'jefeDeGrupoId' })\n  jefeDeGrupo: JefeDeGrupo;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/asistencia.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\nimport { Profesor } from './profesor.entity';\n\n@Entity()\nexport class Asistencia {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'date' })\n  fecha: Date;\n\n  @Column()\n  presente: boolean;\n\n  @ManyToOne(() => JefeDeGrupo, jefeDeGrupo => jefeDeGrupo.asistencias)\n  @JoinColumn({ name: 'jefeDeGrupoId' })\n  jefeDeGrupo: JefeDeGrupo;\n\n  @ManyToOne(() => Profesor, profesor => profesor.asistencias)\n  @JoinColumn({ name: 'profesorId' })\n  profesor: Profesor;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/entities/actividad.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\n\n@Entity()\nexport class Actividad {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  nombre: string;\n\n  @Column()\n  descripcion: string;\n\n  @Column({ type: 'date' })\n  fechaEntrega: Date;\n\n  @ManyToOne(() => JefeDeGrupo, jefeDeGrupo => jefeDeGrupo.actividades)\n  @JoinColumn({ name: 'jefeDeGrupoId' })\n  jefeDeGrupo: JefeDeGrupo;\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            }
        ],
        "commonFiles": [
            {
                "path": "package.json",
                "content": "{\n  \"name\": \"nestjs-backend\",\n  \"version\": \"0.0.1\",\n  \"description\": \"NestJS backend for class management\",\n  \"author\": \"\",\n  \"private\": true,\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"nest build\",\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n    \"start\": \"nest start\",\n    \"start:dev\": \"nest start --watch\",\n    \"start:debug\": \"nest start --debug --watch\",\n    \"start:prod\": \"node dist/main\",\n    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:cov\": \"jest --coverage\",\n    \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\n    \"test:e2e\": \"jest --config ./test/e2e/jest-e2e.json\",\n    \"typeorm\": \"ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js\",\n    \"migration:generate\": \"npm run typeorm -- migration:generate -n\",\n    \"migration:run\": \"npm run typeorm -- migration:run\",\n    \"migration:revert\": \"npm run typeorm -- migration:revert\"\n  },\n  \"dependencies\": {\n    \"@nestjs/common\": \"^10.0.0\",\n    \"@nestjs/config\": \"^3.1.1\",\n    \"@nestjs/core\": \"^10.0.0\",\n    \"@nestjs/platform-express\": \"^10.0.0\",\n    \"@nestjs/typeorm\": \"^10.0.2\",\n    \"class-transformer\": \"^0.5.1\",\n    \"class-validator\": \"^0.14.1\",\n    \"pg\": \"^8.11.3\",\n    \"reflect-metadata\": \"^0.1.13\",\n    \"rxjs\": \"^7.8.1\",\n    \"typeorm\": \"^0.3.19\"\n  },\n  \"devDependencies\": {\n    \"@nestjs/cli\": \"^10.0.0\",\n    \"@nestjs/schematics\": \"^10.0.0\",\n    \"@nestjs/testing\": \"^10.0.0\",\n    \"@types/express\": \"^4.17.17\",\n    \"@types/jest\": \"^29.5.2\",\n    \"@types/node\": \"^20.3.1\",\n    \"@types/supertest\": \"^2.0.12\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n    \"@typescript-eslint/parser\": \"^6.0.0\",\n    \"eslint\": \"^8.42.0\",\n    \"eslint-config-prettier\": \"^8.8.0\",\n    \"eslint-plugin-prettier\": \"^5.0.0\",\n    \"jest\": \"^29.5.0\",\n    \"prettier\": \"^3.0.0\",\n    \"source-map-support\": \"^0.5.21\",\n    \"supertest\": \"^6.3.3\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-loader\": \"^9.4.3\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"typescript\": \"^5.1.3\"\n  },\n  \"jest\": {\n    \"moduleFileExtensions\": [\n      \"js\",\n      \"json\",\n      \"ts\"\n    ],\n    \"rootDir\": \"src\",\n    \"testRegex\": \".*\\\\.spec\\\\.ts$\",\n    \"transform\": {\n      \"^.+\\\\.ts$\": \"ts-jest\"\n    },\n    \"collectCoverageFrom\": [\n      \"**/*\\\\.ts\",\n      \"!**/*\\\\.module\\\\.ts\"\n    ],\n    \"coverageDirectory\": \"../coverage\",\n    \"testEnvironment\": \"node\"\n  }\n}\n",
                "type": "json"
            },
            {
                "path": "tsconfig.json",
                "content": "{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"declaration\": true,\n    \"removeComments\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"target\": \"es2017\",\n    \"sourceMap\": true,\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./\",\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": false,\n    \"noImplicitAny\": false,\n    \"strictBindCallApply\": false,\n    \"forceConsistentCasingInFileNames\": false,\n    \"noFallthroughCasesInSwitch\": false,\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ]\n    }\n  },\n  \"include\": [\n    \"src/**/*\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\"\n  ]\n}\n",
                "type": "json"
            },
            {
                "path": ".env",
                "content": "# Environment variables\n\nNODE_ENV=development\nPORT=3000\nDATABASE_URL=postgresql://user:password@host:port/database\nJWT_SECRET=your_secret_key\n",
                "type": "env"
            },
            {
                "path": "nest-cli.json",
                "content": "{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\"\n}\n",
                "type": "json"
            },
            {
                "path": "src/main.ts",
                "content": "import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(3000);\n}\nbootstrap();\n",
                "type": "typescript"
            }
        ],
        "cliCommands": [
            "npm install",
            "npm run build",
            "npm start:dev",
            "npm run typeorm migration:generate -n CreateDatabase",
            "npm run typeorm migration:run"
        ]
    },
    "frontend": {
        "modules": [
            {
                "name": "AppModule",
                "files": [
                    {
                        "path": "src/app/app.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { SharedModule } from './shared/shared.module';\nimport { AuthModule } from './auth/auth.module';\nimport { HorarioModule } from './horario/horario.module';\nimport { AsistenciaModule } from './asistencia/asistencia.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    CoreModule,\n    SharedModule,\n    AuthModule,\n    HorarioModule,\n    AsistenciaModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/app-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './core/guards/auth.guard';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/horario', pathMatch: 'full' },\n  { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },\n  { path: 'horario', loadChildren: () => import('./horario/horario.module').then(m => m.HorarioModule), canActivate: [AuthGuard] },\n  { path: 'asistencia', loadChildren: () => import('./asistencia/asistencia.module').then(m => m.AsistenciaModule), canActivate: [AuthGuard] },\n  { path: '**', redirectTo: '/horario' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/app.component.ts",
                        "content": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'gestion-escolar-frontend';\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/app.component.html",
                        "content": "<mat-toolbar color=\"primary\">\n  <span>Gestión Escolar</span>\n  <span class=\"spacer\"></span>\n  <button mat-button routerLink=\"/horario\">Horario</button>\n  <button mat-button routerLink=\"/asistencia\">Asistencia</button>\n  <button mat-button routerLink=\"/auth/login\">Login</button>\n  <button mat-button routerLink=\"/auth/register\">Register</button>\n</mat-toolbar>\n<router-outlet></router-outlet>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/app.component.scss",
                        "content": ".spacer {\n  flex: 1 1 auto;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/core/core.module.ts",
                        "content": "import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error(\n        'CoreModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/auth.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Usuario } from '../models/usuario.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiUrl = 'api/auth'; // Ajusta la URL a tu API\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, credentials);\n  }\n\n  register(user: Usuario): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register`, user);\n  }\n\n  logout(): void {\n    // Limpiar el token u otra información del usuario\n  }\n\n  isLoggedIn(): boolean {\n    // Verificar si hay un token válido\n    return false;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/guards/auth.guard.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/auth/login']);\n      return false;\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/interceptors/auth.interceptor.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Obtener el token de donde lo tengas almacenado (localStorage, cookies, etc.)\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer ' + token)\n      });\n\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/usuario.model.ts",
                        "content": "export interface Usuario {\n  id?: string;\n  nombre: string;\n  email: string;\n  password?: string; // Opcional, no siempre se necesita\n  rol?: string; // Ejemplo: 'alumno', 'profesor', 'jefe_grupo'\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/shared.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from './material.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule\n  ],\n  exports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule\n  ]\n})\nexport class SharedModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/material.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  exports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatIconModule\n  ]\n})\nexport class MaterialModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/auth.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    SharedModule\n  ]\n})\nexport class AuthModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/auth-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/login/login.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../../core/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  errorMessage: string = '';\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value).subscribe(\n        response => {\n          // Guardar el token y redirigir\n          localStorage.setItem('token', response.token);\n          this.router.navigate(['/horario']);\n        },\n        error => {\n          this.errorMessage = 'Credenciales incorrectas.';\n        }\n      );\n    }\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/login/login.component.html",
                        "content": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>Login</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Email</mat-label>\n        <input matInput type=\"email\" formControlName=\"email\">\n        <mat-error *ngIf=\"loginForm.get('email')?.hasError('required')\">Email es requerido</mat-error>\n        <mat-error *ngIf=\"loginForm.get('email')?.hasError('email')\">Email no válido</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" formControlName=\"password\">\n        <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">Password es requerido</mat-error>\n      </mat-form-field>\n\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"loginForm.invalid\">Login</button>\n    </form>\n    <p *ngIf=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\n  </mat-card-content>\n</mat-card>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/auth/login/login.component.scss",
                        "content": "mat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n\nmat-form-field {\n  width: 100%;\n  margin-bottom: 1em;\n}\n\n.error-message {\n  color: red;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/auth/register/register.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../../core/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  errorMessage: string = '';\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      nombre: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.registerForm.valid) {\n      this.authService.register(this.registerForm.value).subscribe(\n        response => {\n          // Redirigir al login u otra página\n          this.router.navigate(['/auth/login']);\n        },\n        error => {\n          this.errorMessage = 'Error al registrar el usuario.';\n        }\n      );\n    }\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/register/register.component.html",
                        "content": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>Register</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Nombre</mat-label>\n        <input matInput type=\"text\" formControlName=\"nombre\">\n        <mat-error *ngIf=\"registerForm.get('nombre')?.hasError('required')\">Nombre es requerido</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Email</mat-label>\n        <input matInput type=\"email\" formControlName=\"email\">\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email es requerido</mat-error>\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Email no válido</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" formControlName=\"password\">\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Password es requerido</mat-error>\n      </mat-form-field>\n\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"registerForm.invalid\">Register</button>\n    </form>\n    <p *ngIf=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\n  </mat-card-content>\n</mat-card>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/auth/register/register.component.scss",
                        "content": "mat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n\nmat-form-field {\n  width: 100%;\n  margin-bottom: 1em;\n}\n\n.error-message {\n  color: red;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/horario/horario.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HorarioComponent } from './horario.component';\nimport { HorarioRoutingModule } from './horario-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  declarations: [\n    HorarioComponent\n  ],\n  imports: [\n    CommonModule,\n    HorarioRoutingModule,\n    SharedModule\n  ]\n})\nexport class HorarioModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/horario/horario-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HorarioComponent } from './horario.component';\n\nconst routes: Routes = [\n  { path: '', component: HorarioComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HorarioRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/horario/horario.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-horario',\n  templateUrl: './horario.component.html',\n  styleUrls: ['./horario.component.scss']\n})\nexport class HorarioComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/horario/horario.component.html",
                        "content": "<p>horario works!</p>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/horario/horario.component.scss",
                        "content": "",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/asistencia/asistencia.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AsistenciaComponent } from './asistencia.component';\nimport { AsistenciaRoutingModule } from './asistencia-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  declarations: [\n    AsistenciaComponent\n  ],\n  imports: [\n    CommonModule,\n    AsistenciaRoutingModule,\n    SharedModule\n  ]\n})\nexport class AsistenciaModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/asistencia/asistencia-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AsistenciaComponent } from './asistencia.component';\n\nconst routes: Routes = [\n  { path: '', component: AsistenciaComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AsistenciaRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/asistencia/asistencia.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-asistencia',\n  templateUrl: './asistencia.component.html',\n  styleUrls: ['./asistencia.component.scss']\n})\nexport class AsistenciaComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/asistencia/asistencia.component.html",
                        "content": "<p>asistencia works!</p>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/asistencia/asistencia.component.scss",
                        "content": "",
                        "type": "scss"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "CoreModule",
                "files": [
                    {
                        "path": "src/app/core/core.module.ts",
                        "content": "import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AuthService } from './services/auth.service';\nimport { HorarioService } from './services/horario.service';\nimport { AsistenciaService } from './services/asistencia.service';\nimport { ActivityService } from './services/activity.service';\n\nimport { AuthGuard } from './guards/auth.guard';\nimport { RoleGuard } from './guards/role.guard';\n\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    BrowserAnimationsModule // Import BrowserAnimationsModule\n  ],\n  providers: [\n    AuthService,\n    HorarioService,\n    AsistenciaService,\n    ActivityService,\n    AuthGuard,\n    RoleGuard,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error(\n        'CoreModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/auth.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\ninterface User {\n  id: number;\n  email: string;\n  role: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private currentUserSubject: BehaviorSubject<User>;\n  public currentUser: Observable<User>;\n  private apiUrl = 'http://localhost:3000'; // Replace with your API URL\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser') || '{}'));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        map(user => {\n          // login successful if there's a jwt token in the response\n          if (user && user.token) {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('currentUser', JSON.stringify(user));\n            this.currentUserSubject.next(user);\n          }\n\n          return user;\n        })\n      );\n  }\n\n  logout() {\n    // remove user from local storage and set current user to null\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register`, user);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('currentUser');\n  }\n\n  getRole(): string {\n    const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\n    return user ? user.role : null;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/horario.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorarioService {\n\n  private apiUrl = 'http://localhost:3000/horarios'; // Replace with your API URL\n\n  constructor(private http: HttpClient) { }\n\n  getHorarios(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  getHorario(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`);\n  }\n\n  createHorario(horario: any): Observable<any> {\n    return this.http.post<any>(this.apiUrl, horario);\n  }\n\n  updateHorario(id: number, horario: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, horario);\n  }\n\n  deleteHorario(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/asistencia.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AsistenciaService {\n\n  private apiUrl = 'http://localhost:3000/asistencias'; // Replace with your API URL\n\n  constructor(private http: HttpClient) { }\n\n  getAsistencias(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  getAsistencia(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`);\n  }\n\n  createAsistencia(asistencia: any): Observable<any> {\n    return this.http.post<any>(this.apiUrl, asistencia);\n  }\n\n  updateAsistencia(id: number, asistencia: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, asistencia);\n  }\n\n  deleteAsistencia(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/activity.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityService {\n\n  private apiUrl = 'http://localhost:3000/actividades'; // Replace with your API URL\n\n  constructor(private http: HttpClient) { }\n\n  getActivities(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  getActivity(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`);\n  }\n\n  createActivity(activity: any): Observable<any> {\n    return this.http.post<any>(this.apiUrl, activity);\n  }\n\n  updateActivity(id: number, activity: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, activity);\n  }\n\n  deleteActivity(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/guards/auth.guard.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/guards/role.guard.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n\n    const expectedRole = next.data.expectedRole;\n    const userRole = this.authService.getRole();\n\n    if (this.authService.isAuthenticated() && userRole === expectedRole) {\n      return true;\n    }\n\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/interceptors/auth.interceptor.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // add authorization header with jwt token if available\n    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n    if (currentUser && currentUser.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/user.model.ts",
                        "content": "export interface User {\n  id: number;\n  nombre: string;\n  email: string;\n  role: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/horario.model.ts",
                        "content": "export interface Horario {\n  id: number;\n  grupo: string;\n  materia: string;\n  hora: string;\n  dia: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/asistencia.model.ts",
                        "content": "export interface Asistencia {\n  id: number;\n  fecha: Date;\n  presente: boolean;\n  alumnoId: number;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/actividad.model.ts",
                        "content": "export interface Actividad {\n  id: number;\n  nombre: string;\n  descripcion: string;\n  fechaEntrega: Date;\n  grupoId: number;\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "SharedModule",
                "files": [
                    {
                        "path": "src/app/shared/shared.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from './material.module';\nimport { ConfirmationDialogComponent } from './components/confirmation-dialog/confirmation-dialog.component';\n\n\n@NgModule({\n  declarations: [\n    ConfirmationDialogComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule\n  ],\n  exports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    ConfirmationDialogComponent\n  ]\n})\nexport class SharedModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/material.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSnackBarModule\n  ]\n})\nexport class MaterialModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts",
                        "content": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<ConfirmationDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: { message: string }\n  ) { }\n\n  onConfirm(): void {\n    this.dialogRef.close(true);\n  }\n\n  onCancel(): void {\n    this.dialogRef.close(false);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/components/confirmation-dialog/confirmation-dialog.component.html",
                        "content": "<h1 mat-dialog-title>Confirm</h1>\n<div mat-dialog-content>\n  <p>{{data.message}}</p>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onCancel()\">Cancel</button>\n  <button mat-button color=\"primary\" (click)=\"onConfirm()\">Confirm</button>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/shared/components/confirmation-dialog/confirmation-dialog.component.scss",
                        "content": "",
                        "type": "scss"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "AuthModule",
                "files": [
                    {
                        "path": "src/app/auth/auth.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../shared/material.module';\nimport { AuthService } from './auth.service';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    MaterialModule\n  ],\n  providers: [AuthService]\n})\nexport class AuthModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/auth-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/login/login.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm!: FormGroup;\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value).subscribe({\n        next: (response) => {\n          console.log('Login successful', response);\n          this.router.navigate(['/']); // Navigate to home or dashboard\n        },\n        error: (error) => {\n          console.error('Login failed', error);\n          // Display error message to the user\n        }\n      });\n    }\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/login/login.component.html",
                        "content": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>Login</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\">\n        <mat-error *ngIf=\"loginForm.get('email')?.hasError('required')\">Email is required</mat-error>\n        <mat-error *ngIf=\"loginForm.get('email')?.hasError('email')\">Invalid email format</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\n        <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">Password is required</mat-error>\n      </mat-form-field>\n\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!loginForm.valid\">Login</button>\n    </form>\n  </mat-card-content>\n</mat-card>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/auth/login/login.component.scss",
                        "content": "mat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n\nmat-form-field {\n  width: 100%;\n  margin-bottom: 10px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/auth/register/register.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm!: FormGroup;\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      nombre: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.registerForm.valid) {\n      this.authService.register(this.registerForm.value).subscribe({\n        next: (response) => {\n          console.log('Registration successful', response);\n          this.router.navigate(['/login']); // Navigate to login\n        },\n        error: (error) => {\n          console.error('Registration failed', error);\n          // Display error message to the user\n        }\n      });\n    }\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/register/register.component.html",
                        "content": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>Register</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Nombre</mat-label>\n        <input matInput placeholder=\"Nombre\" formControlName=\"nombre\">\n        <mat-error *ngIf=\"registerForm.get('nombre')?.hasError('required')\">Nombre is required</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\">\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email is required</mat-error>\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Invalid email format</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Password is required</mat-error>\n      </mat-form-field>\n\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!registerForm.valid\">Register</button>\n    </form>\n  </mat-card-content>\n</mat-card>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/auth/register/register.component.scss",
                        "content": "mat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n\nmat-form-field {\n  width: 100%;\n  margin-bottom: 10px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/auth/auth.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiUrl = 'http://localhost:3000/api/auth'; // Replace with your backend API URL\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, credentials);\n  }\n\n  register(userData: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register`, userData);\n  }\n\n  logout(): void {\n    // Clear local storage, cookies, etc.\n    // Redirect to login page\n  }\n\n  isAuthenticated(): boolean {\n    // Check if the user is authenticated (e.g., by checking for a token in local storage)\n    return false; // Replace with your authentication logic\n  }\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "ProjectsModule",
                "files": [
                    {
                        "path": "src/app/projects/projects.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProjectsRoutingModule } from './projects-routing.module';\nimport { ProjectListComponent } from './components/project-list/project-list.component';\nimport { ProjectDetailComponent } from './components/project-detail/project-detail.component';\nimport { ProjectCreateComponent } from './components/project-create/project-create.component';\nimport { ProjectEditComponent } from './components/project-edit/project-edit.component';\nimport { MaterialModule } from '../shared/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    ProjectListComponent,\n    ProjectDetailComponent,\n    ProjectCreateComponent,\n    ProjectEditComponent\n  ],\n  imports: [\n    CommonModule,\n    ProjectsRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class ProjectsModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/projects-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProjectListComponent } from './components/project-list/project-list.component';\nimport { ProjectDetailComponent } from './components/project-detail/project-detail.component';\nimport { ProjectCreateComponent } from './components/project-create/project-create.component';\nimport { ProjectEditComponent } from './components/project-edit/project-edit.component';\n\nconst routes: Routes = [\n  { path: '', component: ProjectListComponent },\n  { path: 'create', component: ProjectCreateComponent },\n  { path: ':id', component: ProjectDetailComponent },\n  { path: 'edit/:id', component: ProjectEditComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProjectsRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-list/project-list.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { Project } from '../../models/project.model';\nimport { ProjectService } from '../../services/project.service';\n\n@Component({\n  selector: 'app-project-list',\n  templateUrl: './project-list.component.html',\n  styleUrls: ['./project-list.component.scss']\n})\nexport class ProjectListComponent implements OnInit {\n  projects: Project[] = [];\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    this.loadProjects();\n  }\n\n  loadProjects(): void {\n    this.projectService.getProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n\n  deleteProject(id: string): void {\n    this.projectService.deleteProject(id).subscribe(() => {\n      this.loadProjects();\n    });\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-list/project-list.component.html",
                        "content": "<div class=\"container\">\n  <h2>Projects</h2>\n  <a routerLink=\"/projects/create\" mat-raised-button color=\"primary\">Create New Project</a>\n  <table mat-table [dataSource]=\"projects\" class=\"mat-elevation-z8\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n      <th mat-header-cell *matHeaderCellDef> Description </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <a routerLink=\"/projects/{{element.id}}\" mat-button color=\"primary\">View</a>\n        <a routerLink=\"/projects/edit/{{element.id}}\" mat-button color=\"accent\">Edit</a>\n        <button mat-button color=\"warn\" (click)=\"deleteProject(element.id)\">Delete</button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"['name', 'description', 'actions']\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: ['name', 'description', 'actions'];\"></tr>\n  </table>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-list/project-list.component.scss",
                        "content": ".container {\n  margin: 20px;\n}\n\ntable {\n  width: 100%;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/components/project-detail/project-detail.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Project } from '../../models/project.model';\nimport { ProjectService } from '../../services/project.service';\n\n@Component({\n  selector: 'app-project-detail',\n  templateUrl: './project-detail.component.html',\n  styleUrls: ['./project-detail.component.scss']\n})\nexport class ProjectDetailComponent implements OnInit {\n  project: Project | undefined;\n\n  constructor(private route: ActivatedRoute, private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id) {\n      this.loadProject(id);\n    }\n  }\n\n  loadProject(id: string): void {\n    this.projectService.getProject(id).subscribe(project => {\n      this.project = project;\n    });\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-detail/project-detail.component.html",
                        "content": "<div class=\"container\" *ngIf=\"project\">\n  <h2>Project Details</h2>\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>{{ project.name }}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p><strong>Description:</strong> {{ project.description }}</p>\n      <p><strong>Start Date:</strong> {{ project.startDate }}</p>\n      <p><strong>End Date:</strong> {{ project.endDate }}</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-detail/project-detail.component.scss",
                        "content": ".container {\n  margin: 20px;\n}\n\nmat-card {\n  max-width: 600px;\n  margin: auto;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/components/project-create/project-create.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ProjectService } from '../../services/project.service';\n\n@Component({\n  selector: 'app-project-create',\n  templateUrl: './project-create.component.html',\n  styleUrls: ['./project-create.component.scss']\n})\nexport class ProjectCreateComponent implements OnInit {\n  projectForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private projectService: ProjectService, private router: Router) {\n    this.projectForm = this.fb.group({\n      name: ['', Validators.required],\n      description: [''],\n      startDate: [null],\n      endDate: [null]\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(): void {\n    if (this.projectForm.valid) {\n      this.projectService.createProject(this.projectForm.value).subscribe(() => {\n        this.router.navigate(['/projects']);\n      });\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-create/project-create.component.html",
                        "content": "<div class=\"container\">\n  <h2>Create Project</h2>\n  <form [formGroup]=\"projectForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" required>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Start Date</mat-label>\n      <input matInput [matDatepicker]=\"startDatePicker\" formControlName=\"startDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"startDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #startDatePicker></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>End Date</mat-label>\n      <input matInput [matDatepicker]=\"endDatePicker\" formControlName=\"endDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"endDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #endDatePicker></mat-datepicker>\n    </mat-form-field>\n\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!projectForm.valid\">Create</button>\n  </form>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-create/project-create.component.scss",
                        "content": ".container {\n  margin: 20px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  margin: auto;\n}\n\nmat-form-field {\n  width: 100%;\n  margin-bottom: 10px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/components/project-edit/project-edit.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProjectService } from '../../services/project.service';\nimport { Project } from '../../models/project.model';\n\n@Component({\n  selector: 'app-project-edit',\n  templateUrl: './project-edit.component.html',\n  styleUrls: ['./project-edit.component.scss']\n})\nexport class ProjectEditComponent implements OnInit {\n  projectForm: FormGroup;\n  projectId: string | null = null;\n\n  constructor(private fb: FormBuilder, private projectService: ProjectService, private router: Router, private route: ActivatedRoute) {\n    this.projectForm = this.fb.group({\n      name: ['', Validators.required],\n      description: [''],\n      startDate: [null],\n      endDate: [null]\n    });\n  }\n\n  ngOnInit(): void {\n    this.projectId = this.route.snapshot.paramMap.get('id');\n    if (this.projectId) {\n      this.loadProject(this.projectId);\n    }\n  }\n\n  loadProject(id: string): void {\n    this.projectService.getProject(id).subscribe(project => {\n      if (project) {\n        this.projectForm.patchValue(project);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.projectForm.valid && this.projectId) {\n      this.projectService.updateProject(this.projectId, this.projectForm.value).subscribe(() => {\n        this.router.navigate(['/projects']);\n      });\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-edit/project-edit.component.html",
                        "content": "<div class=\"container\">\n  <h2>Edit Project</h2>\n  <form [formGroup]=\"projectForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" required>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Start Date</mat-label>\n      <input matInput [matDatepicker]=\"startDatePicker\" formControlName=\"startDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"startDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #startDatePicker></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>End Date</mat-label>\n      <input matInput [matDatepicker]=\"endDatePicker\" formControlName=\"endDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"endDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #endDatePicker></mat-datepicker>\n    </mat-form-field>\n\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!projectForm.valid\">Update</button>\n  </form>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-edit/project-edit.component.scss",
                        "content": ".container {\n  margin: 20px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  margin: auto;\n}\n\nmat-form-field {\n  width: 100%;\n  margin-bottom: 10px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/services/project.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Project } from '../models/project.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  private apiUrl = 'api/projects'; // Replace with your actual API endpoint\n\n  constructor(private http: HttpClient) { }\n\n  getProjects(): Observable<Project[]> {\n    return this.http.get<Project[]>(this.apiUrl);\n  }\n\n  getProject(id: string): Observable<Project | undefined> {\n    return this.http.get<Project | undefined>(`${this.apiUrl}/${id}`);\n  }\n\n  createProject(project: Project): Observable<Project> {\n    return this.http.post<Project>(this.apiUrl, project);\n  }\n\n  updateProject(id: string, project: Project): Observable<Project> {\n    return this.http.put<Project>(`${this.apiUrl}/${id}`, project);\n  }\n\n  deleteProject(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/models/project.model.ts",
                        "content": "export interface Project {\n  id: string;\n  name: string;\n  description: string;\n  startDate: Date | null;\n  endDate: Date | null;\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "TasksModule",
                "files": [
                    {
                        "path": "src/app/tasks/tasks.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TasksRoutingModule } from './tasks-routing.module';\nimport { TaskListComponent } from './components/task-list/task-list.component';\nimport { TaskDetailComponent } from './components/task-detail/task-detail.component';\nimport { TaskCreateComponent } from './components/task-create/task-create.component';\nimport { TaskEditComponent } from './components/task-edit/task-edit.component';\nimport { MaterialModule } from '../shared/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    TaskListComponent,\n    TaskDetailComponent,\n    TaskCreateComponent,\n    TaskEditComponent\n  ],\n  imports: [\n    CommonModule,\n    TasksRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class TasksModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/tasks-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TaskListComponent } from './components/task-list/task-list.component';\nimport { TaskDetailComponent } from './components/task-detail/task-detail.component';\nimport { TaskCreateComponent } from './components/task-create/task-create.component';\nimport { TaskEditComponent } from './components/task-edit/task-edit.component';\n\nconst routes: Routes = [\n  { path: '', component: TaskListComponent },\n  { path: 'create', component: TaskCreateComponent },\n  { path: ':id', component: TaskDetailComponent },\n  { path: ':id/edit', component: TaskEditComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TasksRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/components/task-list/task-list.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../models/task.model';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss']\n})\nexport class TaskListComponent implements OnInit {\n  tasks: Task[] = [];\n  displayedColumns: string[] = ['id', 'title', 'description', 'actions'];\n\n  constructor(private taskService: TaskService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loadTasks();\n  }\n\n  loadTasks(): void {\n    this.taskService.getTasks().subscribe(tasks => {\n      this.tasks = tasks;\n    });\n  }\n\n  deleteTask(id: number): void {\n    if (confirm('Are you sure you want to delete this task?')) {\n      this.taskService.deleteTask(id).subscribe(() => {\n        this.loadTasks();\n      });\n    }\n  }\n\n  editTask(id: number): void {\n    this.router.navigate([`/tasks/${id}/edit`]);\n  }\n\n  viewTask(id: number): void {\n    this.router.navigate([`/tasks/${id}`]);\n  }\n\n  createTask(): void {\n    this.router.navigate(['/tasks/create']);\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/components/task-list/task-list.component.html",
                        "content": "<div class=\"container\">\n  <h2>Tasks</h2>\n  <button mat-raised-button color=\"primary\" (click)=\"createTask()\">Create Task</button>\n  <table mat-table [dataSource]=\"tasks\" class=\"mat-elevation-z8\">\n\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef> ID </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"title\">\n      <th mat-header-cell *matHeaderCellDef> Title </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.title}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n      <th mat-header-cell *matHeaderCellDef> Description </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"primary\" (click)=\"viewTask(element.id)\">\n          <mat-icon>visibility</mat-icon>\n        </button>\n        <button mat-icon-button color=\"accent\" (click)=\"editTask(element.id)\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-icon-button color=\"warn\" (click)=\"deleteTask(element.id)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/components/task-list/task-list.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\ntable {\n  width: 100%;\n}\n\n.mat-mdc-row .mat-mdc-cell {\n  cursor: pointer;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/components/task-detail/task-detail.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../models/task.model';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-task-detail',\n  templateUrl: './task-detail.component.html',\n  styleUrls: ['./task-detail.component.scss']\n})\nexport class TaskDetailComponent implements OnInit {\n  task: Task | undefined;\n\n  constructor(\n    private route: ActivatedRoute,\n    private taskService: TaskService,\n    private location: Location\n  ) { }\n\n  ngOnInit(): void {\n    this.getTask();\n  }\n\n  getTask(): void {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    this.taskService.getTask(id)\n      .subscribe(task => this.task = task);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/components/task-detail/task-detail.component.html",
                        "content": "<div class=\"container\">\n  <h2>Task Detail</h2>\n  <div *ngIf=\"task\">\n    <h3>{{task.title}}</h3>\n    <p><strong>Description:</strong> {{task.description}}</p>\n    <p><strong>Due Date:</strong> {{task.dueDate | date}}</p>\n  </div>\n  <button mat-raised-button color=\"primary\" (click)=\"goBack()\">Go Back</button>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/components/task-detail/task-detail.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/components/task-create/task-create.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TaskService } from '../../services/task.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-task-create',\n  templateUrl: './task-create.component.html',\n  styleUrls: ['./task-create.component.scss']\n})\nexport class TaskCreateComponent implements OnInit {\n  taskForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private taskService: TaskService, private router: Router) {\n    this.taskForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      dueDate: [null]\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(): void {\n    if (this.taskForm.valid) {\n      this.taskService.createTask(this.taskForm.value).subscribe(() => {\n        this.router.navigate(['/tasks']);\n      });\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/components/task-create/task-create.component.html",
                        "content": "<div class=\"container\">\n  <h2>Create Task</h2>\n  <form [formGroup]=\"taskForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" required>\n      <mat-error *ngIf=\"taskForm.get('title')?.hasError('required')\">Title is required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Choose a date</mat-label>\n      <input matInput [matDatepicker]=\"picker\" formControlName=\"dueDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!taskForm.valid\">Create</button>\n  </form>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/components/task-create/task-create.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\nmat-form-field {\n  width: 100%;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/components/task-edit/task-edit.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TaskService } from '../../services/task.service';\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-task-edit',\n  templateUrl: './task-edit.component.html',\n  styleUrls: ['./task-edit.component.scss']\n})\nexport class TaskEditComponent implements OnInit {\n  taskId: number = 0;\n  taskForm: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private taskService: TaskService,\n    private router: Router\n  ) {\n    this.taskForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      dueDate: [null]\n    });\n  }\n\n  ngOnInit(): void {\n    this.taskId = Number(this.route.snapshot.paramMap.get('id'));\n    this.loadTask();\n  }\n\n  loadTask(): void {\n    this.taskService.getTask(this.taskId).subscribe(task => {\n      this.taskForm.patchValue(task);\n    });\n  }\n\n  onSubmit(): void {\n    if (this.taskForm.valid) {\n      this.taskService.updateTask(this.taskId, this.taskForm.value).subscribe(() => {\n        this.router.navigate(['/tasks']);\n      });\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/components/task-edit/task-edit.component.html",
                        "content": "<div class=\"container\">\n  <h2>Edit Task</h2>\n  <form [formGroup]=\"taskForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" required>\n      <mat-error *ngIf=\"taskForm.get('title')?.hasError('required')\">Title is required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Choose a date</mat-label>\n      <input matInput [matDatepicker]=\"picker\" formControlName=\"dueDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!taskForm.valid\">Update</button>\n  </form>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/components/task-edit/task-edit.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\nmat-form-field {\n  width: 100%;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/services/task.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Task } from '../models/task.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private apiUrl = 'api/tasks'; // Replace with your actual API endpoint\n\n  constructor(private http: HttpClient) { }\n\n  getTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(this.apiUrl);\n  }\n\n  getTask(id: number): Observable<Task> {\n    return this.http.get<Task>(`${this.apiUrl}/${id}`);\n  }\n\n  createTask(task: Task): Observable<Task> {\n    return this.http.post<Task>(this.apiUrl, task);\n  }\n\n  updateTask(id: number, task: Task): Observable<Task> {\n    return this.http.put<Task>(`${this.apiUrl}/${id}`, task);\n  }\n\n  deleteTask(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/models/task.model.ts",
                        "content": "export interface Task {\n  id: number;\n  title: string;\n  description: string;\n  dueDate: Date | null; // Changed to Date or null\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            }
        ],
        "commonFiles": [
            {
                "path": "package.json",
                "content": "{\n  \"name\": \"horario-asistencia-app\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^18.0.0\",\n    \"@angular/common\": \"^18.0.0\",\n    \"@angular/compiler\": \"^18.0.0\",\n    \"@angular/core\": \"^18.0.0\",\n    \"@angular/forms\": \"^18.0.0\",\n    \"@angular/platform-browser\": \"^18.0.0\",\n    \"@angular/platform-browser-dynamic\": \"^18.0.0\",\n    \"@angular/router\": \"^18.0.0\",\n    \"rxjs\": \"~7.8.0\",\n    \"tslib\": \"^2.3.0\",\n    \"zone.js\": \"~0.14.0\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^18.0.0\",\n    \"@angular-eslint/builder\": \"^18.0.0\",\n    \"@angular-eslint/eslint-plugin\": \"^18.0.0\",\n    \"@angular-eslint/eslint-plugin-template\": \"^18.0.0\",\n    \"@angular-eslint/schematics\": \"^18.0.0\",\n    \"@angular-eslint/template-parser\": \"^18.0.0\",\n    \"@angular/cli\": \"^18.0.0\",\n    \"@angular/compiler-cli\": \"^18.0.0\",\n    \"@types/jasmine\": \"~4.3.0\",\n    \"@types/node\": \"^20.11.24\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n    \"@typescript-eslint/parser\": \"^6.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"jasmine-core\": \"~4.6.0\",\n    \"jest\": \"^29.0.0\",\n    \"jest-preset-angular\": \"^13.0.0\",\n    \"karma\": \"~6.4.0\",\n    \"karma-chrome-launcher\": \"~3.2.0\",\n    \"karma-coverage\": \"~2.2.0\",\n    \"karma-jasmine\": \"~5.1.0\",\n    \"karma-jasmine-html-reporter\": \"~2.1.0\",\n    \"typescript\": \"~5.3.0\"\n  }\n}",
                "type": "json"
            },
            {
                "path": "angular.json",
                "content": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"horario-asistencia-app\": {\n      \"projectType\": \"application\",\n      \"schematics\": {\n        \"@schematics/angular:component\": {\n          \"style\": \"scss\"\n        }\n      },\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/horario-asistencia-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"inlineStyleLanguage\": \"scss\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.scss\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"horario-asistencia-app:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"horario-asistencia-app:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"horario-asistencia-app:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"inlineStyleLanguage\": \"scss\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.scss\"],\n            \"scripts\": []\n          }\n        },\n        \"lint\": {\n          \"builder\": \"@angular-eslint/builder:lint\",\n          \"options\": {\n            \"lintFilePatterns\": [\"src/**/*.ts\", \"src/**/*.html\"]\n          }\n        },\n        \"e2e\": {\n          \"builder\": \"@angular-devkit/build-angular:protractor\",\n          \"options\": {\n            \"protractorConfig\": \"e2e/protractor.conf.js\",\n            \"devServerTarget\": \"horario-asistencia-app:serve\"\n          },\n          \"configurations\": {\n            \"production\": {\n              \"devServerTarget\": \"horario-asistencia-app:serve:production\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
                "type": "json"
            },
            {
                "path": "tsconfig.json",
                "content": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"importHelpers\": true,\n    \"target\": \"es2022\",\n    \"module\": \"es2022\",\n    \"lib\": [\"es2022\", \"dom\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}",
                "type": "json"
            },
            {
                "path": "src/index.html",
                "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>HorarioAsistenciaApp</title>\n  <base href=\"/\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n</body>\n</html>",
                "type": "html"
            },
            {
                "path": "src/styles.scss",
                "content": "/* You can add global styles to this file, and also import other style files */\n\nhtml,\nbody {\n  height: 100%;\n}\n\nbody {\n  margin: 0;\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}",
                "type": "scss"
            },
            {
                "path": "src/environments/environment.ts",
                "content": "// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:3000/api'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';",
                "type": "typescript"
            },
            {
                "path": "src/environments/environment.prod.ts",
                "content": "export const environment = {\n  production: true,\n  apiUrl: 'https://production-api.example.com/api'\n};",
                "type": "typescript"
            }
        ],
        "cliCommands": [
            "npm install",
            "ng add @angular/core@18",
            "ng add @angular/common@18",
            "ng new horario-asistencia-app --routing=true --style=scss",
            "ng generate component auth",
            "ng generate component horario-ui",
            "ng generate component asistencia-ui",
            "ng generate service auth",
            "ng generate service horario",
            "ng generate service asistencia",
            "ng generate interface models/usuario",
            "ng generate interface models/alumno",
            "ng generate interface models/jefe-de-grupo",
            "ng generate interface models/profesor",
            "ng generate interface models/horario",
            "ng generate interface models/asistencia",
            "ng generate interface models/actividad",
            "ng test",
            "ng lint"
        ]
    }
}
